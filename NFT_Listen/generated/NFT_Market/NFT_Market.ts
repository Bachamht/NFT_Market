// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class log extends ethereum.Event {
  get params(): log__Params {
    return new log__Params(this);
  }
}

export class log__Params {
  _event: log;

  constructor(event: log) {
    this._event = event;
  }

  get param0(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class log_address extends ethereum.Event {
  get params(): log_address__Params {
    return new log_address__Params(this);
  }
}

export class log_address__Params {
  _event: log_address;

  constructor(event: log_address) {
    this._event = event;
  }

  get param0(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class log_array extends ethereum.Event {
  get params(): log_array__Params {
    return new log_array__Params(this);
  }
}

export class log_array__Params {
  _event: log_array;

  constructor(event: log_array) {
    this._event = event;
  }

  get val(): Array<BigInt> {
    return this._event.parameters[0].value.toBigIntArray();
  }
}

export class log_array1 extends ethereum.Event {
  get params(): log_array1__Params {
    return new log_array1__Params(this);
  }
}

export class log_array1__Params {
  _event: log_array1;

  constructor(event: log_array1) {
    this._event = event;
  }

  get val(): Array<BigInt> {
    return this._event.parameters[0].value.toBigIntArray();
  }
}

export class log_array2 extends ethereum.Event {
  get params(): log_array2__Params {
    return new log_array2__Params(this);
  }
}

export class log_array2__Params {
  _event: log_array2;

  constructor(event: log_array2) {
    this._event = event;
  }

  get val(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }
}

export class log_bytes extends ethereum.Event {
  get params(): log_bytes__Params {
    return new log_bytes__Params(this);
  }
}

export class log_bytes__Params {
  _event: log_bytes;

  constructor(event: log_bytes) {
    this._event = event;
  }

  get param0(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class log_bytes32 extends ethereum.Event {
  get params(): log_bytes32__Params {
    return new log_bytes32__Params(this);
  }
}

export class log_bytes32__Params {
  _event: log_bytes32;

  constructor(event: log_bytes32) {
    this._event = event;
  }

  get param0(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class log_int extends ethereum.Event {
  get params(): log_int__Params {
    return new log_int__Params(this);
  }
}

export class log_int__Params {
  _event: log_int;

  constructor(event: log_int) {
    this._event = event;
  }

  get param0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class log_named_address extends ethereum.Event {
  get params(): log_named_address__Params {
    return new log_named_address__Params(this);
  }
}

export class log_named_address__Params {
  _event: log_named_address;

  constructor(event: log_named_address) {
    this._event = event;
  }

  get key(): string {
    return this._event.parameters[0].value.toString();
  }

  get val(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class log_named_array extends ethereum.Event {
  get params(): log_named_array__Params {
    return new log_named_array__Params(this);
  }
}

export class log_named_array__Params {
  _event: log_named_array;

  constructor(event: log_named_array) {
    this._event = event;
  }

  get key(): string {
    return this._event.parameters[0].value.toString();
  }

  get val(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }
}

export class log_named_array1 extends ethereum.Event {
  get params(): log_named_array1__Params {
    return new log_named_array1__Params(this);
  }
}

export class log_named_array1__Params {
  _event: log_named_array1;

  constructor(event: log_named_array1) {
    this._event = event;
  }

  get key(): string {
    return this._event.parameters[0].value.toString();
  }

  get val(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }
}

export class log_named_array2 extends ethereum.Event {
  get params(): log_named_array2__Params {
    return new log_named_array2__Params(this);
  }
}

export class log_named_array2__Params {
  _event: log_named_array2;

  constructor(event: log_named_array2) {
    this._event = event;
  }

  get key(): string {
    return this._event.parameters[0].value.toString();
  }

  get val(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }
}

export class log_named_bytes extends ethereum.Event {
  get params(): log_named_bytes__Params {
    return new log_named_bytes__Params(this);
  }
}

export class log_named_bytes__Params {
  _event: log_named_bytes;

  constructor(event: log_named_bytes) {
    this._event = event;
  }

  get key(): string {
    return this._event.parameters[0].value.toString();
  }

  get val(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class log_named_bytes32 extends ethereum.Event {
  get params(): log_named_bytes32__Params {
    return new log_named_bytes32__Params(this);
  }
}

export class log_named_bytes32__Params {
  _event: log_named_bytes32;

  constructor(event: log_named_bytes32) {
    this._event = event;
  }

  get key(): string {
    return this._event.parameters[0].value.toString();
  }

  get val(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class log_named_decimal_int extends ethereum.Event {
  get params(): log_named_decimal_int__Params {
    return new log_named_decimal_int__Params(this);
  }
}

export class log_named_decimal_int__Params {
  _event: log_named_decimal_int;

  constructor(event: log_named_decimal_int) {
    this._event = event;
  }

  get key(): string {
    return this._event.parameters[0].value.toString();
  }

  get val(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get decimals(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class log_named_decimal_uint extends ethereum.Event {
  get params(): log_named_decimal_uint__Params {
    return new log_named_decimal_uint__Params(this);
  }
}

export class log_named_decimal_uint__Params {
  _event: log_named_decimal_uint;

  constructor(event: log_named_decimal_uint) {
    this._event = event;
  }

  get key(): string {
    return this._event.parameters[0].value.toString();
  }

  get val(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get decimals(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class log_named_int extends ethereum.Event {
  get params(): log_named_int__Params {
    return new log_named_int__Params(this);
  }
}

export class log_named_int__Params {
  _event: log_named_int;

  constructor(event: log_named_int) {
    this._event = event;
  }

  get key(): string {
    return this._event.parameters[0].value.toString();
  }

  get val(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class log_named_string extends ethereum.Event {
  get params(): log_named_string__Params {
    return new log_named_string__Params(this);
  }
}

export class log_named_string__Params {
  _event: log_named_string;

  constructor(event: log_named_string) {
    this._event = event;
  }

  get key(): string {
    return this._event.parameters[0].value.toString();
  }

  get val(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class log_named_uint extends ethereum.Event {
  get params(): log_named_uint__Params {
    return new log_named_uint__Params(this);
  }
}

export class log_named_uint__Params {
  _event: log_named_uint;

  constructor(event: log_named_uint) {
    this._event = event;
  }

  get key(): string {
    return this._event.parameters[0].value.toString();
  }

  get val(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class log_string extends ethereum.Event {
  get params(): log_string__Params {
    return new log_string__Params(this);
  }
}

export class log_string__Params {
  _event: log_string;

  constructor(event: log_string) {
    this._event = event;
  }

  get param0(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class log_uint extends ethereum.Event {
  get params(): log_uint__Params {
    return new log_uint__Params(this);
  }
}

export class log_uint__Params {
  _event: log_uint;

  constructor(event: log_uint) {
    this._event = event;
  }

  get param0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class logs extends ethereum.Event {
  get params(): logs__Params {
    return new logs__Params(this);
  }
}

export class logs__Params {
  _event: logs;

  constructor(event: logs) {
    this._event = event;
  }

  get param0(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class NFT_Market__targetArtifactSelectorsResultTargetedArtifactSelectors_Struct extends ethereum.Tuple {
  get addr(): Address {
    return this[0].toAddress();
  }

  get selectors(): Array<Bytes> {
    return this[1].toBytesArray();
  }
}

export class NFT_Market__targetInterfacesResultTargetedInterfaces_Struct extends ethereum.Tuple {
  get addr(): Address {
    return this[0].toAddress();
  }

  get artifacts(): Array<string> {
    return this[1].toStringArray();
  }
}

export class NFT_Market__targetSelectorsResultTargetedSelectors_Struct extends ethereum.Tuple {
  get addr(): Address {
    return this[0].toAddress();
  }

  get selectors(): Array<Bytes> {
    return this[1].toBytesArray();
  }
}

export class NFT_Market extends ethereum.SmartContract {
  static bind(address: Address): NFT_Market {
    return new NFT_Market("NFT_Market", address);
  }

  IS_TEST(): boolean {
    let result = super.call("IS_TEST", "IS_TEST():(bool)", []);

    return result[0].toBoolean();
  }

  try_IS_TEST(): ethereum.CallResult<boolean> {
    let result = super.tryCall("IS_TEST", "IS_TEST():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  excludeArtifacts(): Array<string> {
    let result = super.call(
      "excludeArtifacts",
      "excludeArtifacts():(string[])",
      [],
    );

    return result[0].toStringArray();
  }

  try_excludeArtifacts(): ethereum.CallResult<Array<string>> {
    let result = super.tryCall(
      "excludeArtifacts",
      "excludeArtifacts():(string[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  excludeContracts(): Array<Address> {
    let result = super.call(
      "excludeContracts",
      "excludeContracts():(address[])",
      [],
    );

    return result[0].toAddressArray();
  }

  try_excludeContracts(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "excludeContracts",
      "excludeContracts():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  excludeSenders(): Array<Address> {
    let result = super.call(
      "excludeSenders",
      "excludeSenders():(address[])",
      [],
    );

    return result[0].toAddressArray();
  }

  try_excludeSenders(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "excludeSenders",
      "excludeSenders():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  failed(): boolean {
    let result = super.call("failed", "failed():(bool)", []);

    return result[0].toBoolean();
  }

  try_failed(): ethereum.CallResult<boolean> {
    let result = super.tryCall("failed", "failed():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  targetArtifactSelectors(): Array<NFT_Market__targetArtifactSelectorsResultTargetedArtifactSelectors_Struct> {
    let result = super.call(
      "targetArtifactSelectors",
      "targetArtifactSelectors():((address,bytes4[])[])",
      [],
    );

    return result[0].toTupleArray<NFT_Market__targetArtifactSelectorsResultTargetedArtifactSelectors_Struct>();
  }

  try_targetArtifactSelectors(): ethereum.CallResult<
    Array<NFT_Market__targetArtifactSelectorsResultTargetedArtifactSelectors_Struct>
  > {
    let result = super.tryCall(
      "targetArtifactSelectors",
      "targetArtifactSelectors():((address,bytes4[])[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<NFT_Market__targetArtifactSelectorsResultTargetedArtifactSelectors_Struct>(),
    );
  }

  targetArtifacts(): Array<string> {
    let result = super.call(
      "targetArtifacts",
      "targetArtifacts():(string[])",
      [],
    );

    return result[0].toStringArray();
  }

  try_targetArtifacts(): ethereum.CallResult<Array<string>> {
    let result = super.tryCall(
      "targetArtifacts",
      "targetArtifacts():(string[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  targetContracts(): Array<Address> {
    let result = super.call(
      "targetContracts",
      "targetContracts():(address[])",
      [],
    );

    return result[0].toAddressArray();
  }

  try_targetContracts(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "targetContracts",
      "targetContracts():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  targetInterfaces(): Array<NFT_Market__targetInterfacesResultTargetedInterfaces_Struct> {
    let result = super.call(
      "targetInterfaces",
      "targetInterfaces():((address,string[])[])",
      [],
    );

    return result[0].toTupleArray<NFT_Market__targetInterfacesResultTargetedInterfaces_Struct>();
  }

  try_targetInterfaces(): ethereum.CallResult<
    Array<NFT_Market__targetInterfacesResultTargetedInterfaces_Struct>
  > {
    let result = super.tryCall(
      "targetInterfaces",
      "targetInterfaces():((address,string[])[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<NFT_Market__targetInterfacesResultTargetedInterfaces_Struct>(),
    );
  }

  targetSelectors(): Array<NFT_Market__targetSelectorsResultTargetedSelectors_Struct> {
    let result = super.call(
      "targetSelectors",
      "targetSelectors():((address,bytes4[])[])",
      [],
    );

    return result[0].toTupleArray<NFT_Market__targetSelectorsResultTargetedSelectors_Struct>();
  }

  try_targetSelectors(): ethereum.CallResult<
    Array<NFT_Market__targetSelectorsResultTargetedSelectors_Struct>
  > {
    let result = super.tryCall(
      "targetSelectors",
      "targetSelectors():((address,bytes4[])[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<NFT_Market__targetSelectorsResultTargetedSelectors_Struct>(),
    );
  }

  targetSenders(): Array<Address> {
    let result = super.call("targetSenders", "targetSenders():(address[])", []);

    return result[0].toAddressArray();
  }

  try_targetSenders(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "targetSenders",
      "targetSenders():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }
}

export class FailedCall extends ethereum.Call {
  get inputs(): FailedCall__Inputs {
    return new FailedCall__Inputs(this);
  }

  get outputs(): FailedCall__Outputs {
    return new FailedCall__Outputs(this);
  }
}

export class FailedCall__Inputs {
  _call: FailedCall;

  constructor(call: FailedCall) {
    this._call = call;
  }
}

export class FailedCall__Outputs {
  _call: FailedCall;

  constructor(call: FailedCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetUpCall extends ethereum.Call {
  get inputs(): SetUpCall__Inputs {
    return new SetUpCall__Inputs(this);
  }

  get outputs(): SetUpCall__Outputs {
    return new SetUpCall__Outputs(this);
  }
}

export class SetUpCall__Inputs {
  _call: SetUpCall;

  constructor(call: SetUpCall) {
    this._call = call;
  }
}

export class SetUpCall__Outputs {
  _call: SetUpCall;

  constructor(call: SetUpCall) {
    this._call = call;
  }
}

export class Test_ListCall extends ethereum.Call {
  get inputs(): Test_ListCall__Inputs {
    return new Test_ListCall__Inputs(this);
  }

  get outputs(): Test_ListCall__Outputs {
    return new Test_ListCall__Outputs(this);
  }
}

export class Test_ListCall__Inputs {
  _call: Test_ListCall;

  constructor(call: Test_ListCall) {
    this._call = call;
  }
}

export class Test_ListCall__Outputs {
  _call: Test_ListCall;

  constructor(call: Test_ListCall) {
    this._call = call;
  }
}

export class Test_buyCall extends ethereum.Call {
  get inputs(): Test_buyCall__Inputs {
    return new Test_buyCall__Inputs(this);
  }

  get outputs(): Test_buyCall__Outputs {
    return new Test_buyCall__Outputs(this);
  }
}

export class Test_buyCall__Inputs {
  _call: Test_buyCall;

  constructor(call: Test_buyCall) {
    this._call = call;
  }
}

export class Test_buyCall__Outputs {
  _call: Test_buyCall;

  constructor(call: Test_buyCall) {
    this._call = call;
  }
}

export class Test_tokenRecievedCall extends ethereum.Call {
  get inputs(): Test_tokenRecievedCall__Inputs {
    return new Test_tokenRecievedCall__Inputs(this);
  }

  get outputs(): Test_tokenRecievedCall__Outputs {
    return new Test_tokenRecievedCall__Outputs(this);
  }
}

export class Test_tokenRecievedCall__Inputs {
  _call: Test_tokenRecievedCall;

  constructor(call: Test_tokenRecievedCall) {
    this._call = call;
  }
}

export class Test_tokenRecievedCall__Outputs {
  _call: Test_tokenRecievedCall;

  constructor(call: Test_tokenRecievedCall) {
    this._call = call;
  }
}
